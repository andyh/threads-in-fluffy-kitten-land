<!doctype html>
%html{lang: "en"}
  %head
    %meta{charset: "utf-8"}/
    %title The adventures of threads in fluffy kitten land
    %meta{content: "The adventures of threads in fluffy kitten land", name: "description"}/
    %meta{content: "Jon Cairns", name: "author"}/
    %meta{content: "yes", name: "apple-mobile-web-app-capable"}/
    %meta{content: "black-translucent", name: "apple-mobile-web-app-status-bar-style"}/
    %meta{content: "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", name: "viewport"}/
    %link{href: "extra.css", rel: "stylesheet"}/
    %link{href: "../reveal/css/reveal.min.css", rel: "stylesheet"}/
    %link#theme{href: "../reveal/css/theme/night.css", rel: "stylesheet"}/
    / For syntax highlighting
    %link{href: "../reveal/lib/css/zenburn.css", rel: "stylesheet"}/
    / If the query includes 'print-pdf', use the PDF print sheet
    :javascript
      document.write( '<link rel="stylesheet" href="../reveal/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    /[if lt IE 9]
      <script src="../reveal/lib/js/html5shiv.js"></script>
  %body
    %script{src: "../reveal/lib/js/head.min.js"}
    %script{src: "../reveal/js/reveal.min.js"}

    .reveal
      .slides
        %section
          %h1{style: "text-transform: lowercase;"} The adventures of threads
          %h2 In fluffy kitten land
          %p
            %small
              %a{href: "http://joncairns.com"} Jon Cairns
              \/
              %a{href: "http://twitter.com/joonty"} @joonty

        %section
          %section
            %h2 This is about writing multithreaded applications in ruby
            %aside.notes It's also interspersed with pictures of kittens. Points will be awarded if you can give me the total number of kittens/cats that appear.

          %section
            %h2 But first, a story
            %div.fragment
              %img{src: "images/four-kittens.jpg"}
              %p.credit
                Image from
                %a{src: "http://www.wallpapersat.com/wallpaper/four-fluffy-kitten.html"} http://www.wallpapersat.com/wallpaper/four-fluffy-kitten.html
            %aside.notes There is a land far-far away, called Fluffy Kitten Land. It's populated, to a large extent, by fluffy kittens. One of it's non-kitten inhabitants is Fred, the thread, who is a public servant. One day, Fred is called into the court of the fluffy kitten king.

          %section
            %h2 the fluffy kitten king
            %div.fragment
              %img{src: "images/hamster-king.jpg"}
              %p.credit
                Image from
                %a{src: "http://undercoverguineapigs.blogspot.co.uk/2010/12/puppy-guinea-pig-wins-christmas-mouse.html"} http://undercoverguineapigs.blogspot.co.uk/2010/12/puppy-guinea-pig-wins-christmas-mouse.html
            %aside.notes By a perverse twist of fate, the fluffy kitten king is a hamster called Cyril. He came to Fred the thread with a problem: "Fluffy Kitten land is a happy place, but we have never done a population census. We have no idea how many kittens live here, so I'm giving you the task of counting all the kittens in the land." Fred knew that this was a big task, and that he couldn't possibly do it by himself - it would take too long. Fortunately, he had a number of cousins who could help when the time came.

          %section
            %h2 The great fluffy kitten census
            %ul
              %li.fragment Every kitten should be counted
              %li.fragment The total number of kittens should be produced at the end, along with the totals grouped by colour
              %li.fragment Data for each kitten needs to be stored on the fluffy kitten database, which has a web API
              %li.fragment Fred the thread can use any number of his cousins, to speed things up
            %aside.notes So that's the background and the spec for our program. To properly utilize Fred's cousins, we need to understand the concept of multithreading, and to understand the practical application in Ruby.

        %section
          %h2 threads: a definition
          %p.quote
            %span.marks "
            a thread of execution is the smallest sequence of programmed instructions that can be managed independently by an operating system scheduler
            %span.marks "

        %section
          %h2 A fluffy kitten
          %img{src: "images/fluffy-kitten-1.jpg"}
          %p.credit
            Image from
            %a{src: "http://imgarcade.com/1/fluffy-kittens/"} http://imgarcade.com/1/fluffy-kittens/

        %section
          %h2 let's talk about Fred
          %pre
            %code.ruby{"include" => "scripts/thread-methods.rb"}
          %p.fragment You can query a thread variable about it's current status
          %aside.notes
            Every program runs in at least one thread - the main thread.

            Threads are defined with Thread.new, and everything inside the block is executed in this thread. When reading the code, imagine that block running at the same time as the proceeding code in the main thread.

            `join` is used to wait for the thread to finish, so that the program can continue in the main thraed.

        %section
          %h2 Scheduling threads
          %pre
            %code.ruby{"include" => "scripts/thread-scheduling.rb"}
          %ol
            %li.fragment Threads can access variables from the scope in which they are defined
            %li.fragment Thread.stop will cause a thread to sleep
            %li.fragment Thread#wakeup or Thread#run will start the thread back up again
            %li.fragment The "return" value of a thread can be accessed with Thread#value
          %aside.notes
            The sleep has been added in the main thread to give the new thread time to start up.

        %section
          %h2 ruby's multithreading idiosyncrasies
          %ol
            %li.fragment MRI, the most commonly used interpreter, doesn't let the operating system schedule the threads, it manages that itself
            %li.fragment MRI has a global interpreter lock => only one thread can execute ruby code at any time
            %li.fragment Other interpreters provide true multithreading, e.g. jRuby and Rubinius

        %section
          %h2 multithreading in MRI
          %p
            Even though only one thread can execute
            %span.standout ruby
            at any time, IO operations don't count as being within the interpreter
          %i.fragment.standout Apps with considerable IO use can see speed improvement by multithreading

        %section
          %h2 Doing calculatey stuff
          %pre
            %code.ruby{"include" => "scripts/threads-with-calculations.rb"}

          %table.fragment
            %thead
              %tr
                %th No. threads
                %th MRI 2.0.0
                %th jRuby 1.7.0
            %tbody
              %tr
                %td 1
                %td ~ 0.60s
                %td ~ 0.61s
              %tr
                %td 4
                %td ~ 2.47s
                %td ~ 0.74s
          %aside.notes
            This is calculating fibonacci numbers, and doing so in parallel with n threads. We pass in the number of threads as an argument to the script.

            Since this is all in the ruby interpreter, we should expect to see no speed improvement by using multiple threads.

            MRI shows that it takes more than 4 times the amount of time to calculate it in 4 separate threads than in 1, whereas jRuby is demonstrating proper parallelization.

        %section
          %h2 Another fluffy kitten
          %img{src: "images/fluffy-kitten-2.png"}
          %p.credit
            Image from
            %a{src: "http://imgarcade.com/1/fluffy-kittens/"} http://imgarcade.com/1/fluffy-kittens/

        %section
          %h2 Doing IO stuff
          %pre
            %code.ruby{"include" => "scripts/threads-with-io.rb"}

          %table.fragment
            %thead
              %tr
                %th No. threads
                %th MRI 2.0.0
                %th jRuby 1.7.0
            %tbody
              %tr
                %td 1
                %td ~ 4.27s
                %td ~ 5.76s
              %tr
                %td 4
                %td ~ 2.40s
                %td ~ 2.95s

        %section
          %section
            %h2 A simple kitten counter
            %p We want to test counting some kittens across multiple threads. Let's create a simple counter class.
            %pre
              %code.ruby{"include" => "scripts/kitten-counter.rb"}

          %section
            %h4 A simple kitten counter
            %pre
              %code.ruby{"include" => "scripts/kitten-counter-implementation.rb"}

          %section
            %h4 A simple kitten counter
            %p This seems to work nicely in MRI:
            %pre
              %code.bash{"include" => "scripts/kitten-counter-mri.txt"}
            %div.fragment
              %p But it all goes a bit weird in jruby:
              %pre
                %code.bash{"include" => "scripts/kitten-counter-jruby.txt"}


        %section
          %h2 Thread safety
          %img{src: "images/hater-kitten.jpg"}
          %p.credit
            Image from
            %a{src: "http://imgarcade.com/1/fluffy-kittens/"} http://imgarcade.com/1/fluffy-kittens/

        %section
          %h2 Identifying unsafe operations
          %p.fragment
            Anything where you
            %b modify
            global state without locking
          %p.fragment
            So this must be happening in our simple counter
          %aside.notes Multiple threads can be reading and writing to the same resource at the same time.

        %section
          %h2 A quick recap
          %pre
            %code.ruby{"include" => "scripts/kitten-counter-implementation.rb"}

        %section
          %section
            %h2 Fixing unsafe thingy #1
            %pre
              %code.ruby{"include" => "scripts/kitten-counter-unsafe.rb"}
            %aside.notes This is actually unsafe in MRI too, even though we saw the correct count. If you try it enough times, sometimes it will give you an incorrect value.

          %section
            %h4 Fixing unsafe thingy #1
            %p A mutex can be used to lock a resource while one thread is reading or writing to it:
            %pre.fragment
              %code.ruby{"include" => "scripts/kitten-counter-safe.rb"}
            %aside.notes Only one thread can execute the code inside the Mutex#syncronize block. All other threads wait until the resource has been released.

          %section
            %h4 Fixing unsafe thingy #1
            %p But we now sometimes count more kittens than we should:
            %pre.fragment
              %code.ruby{"include" => "scripts/kitten-counter-safe-jruby.txt"}

            %img{src: "images/fluffy-kitten-5.jpg", width: '5px'}

        %section
          %section
            %h2 Fixing unsafe thingy #2
            %pre
              %code.ruby{"include" => "scripts/kitten-counter-array-unsafe.rb"}
            %aside.notes The pop method is technically thread safe in MRI, due to the GIL. However, calling empty? followed by pop isn't. And it isn't safe at all in jRuby.

          %section
            %h4 Fixing unsafe thingy #2
            %p Ruby's Array class is (sometimes) not thread safe.
            %p.fragment Let's use Queue instead.
            %pre.fragment
              %code.ruby{"include" => "scripts/kitten-counter-queue-safe.rb"}

        %section
          %h2 Queues
          %p Queue can be a replacement for an Array, but there are significant differences:
          %ol
            %li.fragment Queue is thread safe
            %li.fragment You cannot reference Queue items by index
            %li.fragment Taking an item off a queue will block until an item is added elsewhere (unless you specify it to be non-blocking)
            %li.fragment Queue includes the Enumerable module, but it doesn't include any of Array's methods
            %li.fragment You can also used SizedQueue, if you want to specify the maximum number of items in the queue

        %section
          %h2 Oh look, a kitten
          %img{src: "images/fluffy-kitten-3.jpg"}
          %p.credit
            Image from
            %a{src: "http://imgarcade.com/1/fluffy-kittens/"} http://imgarcade.com/1/fluffy-kittens/

        %section
          %h2 Let's count some kittens
          %p A quick recap of the spec:
          %ul
            %li.fragment Every kitten should be counted
            %li.fragment The total number of kittens should be produced at the end, along with the totals grouped by colour
            %li.fragment Data for each kitten needs to be stored on the kitten database, which has a web API
            %li.fragment Fred the thread can use any number of his cousins, to speed things up

        %section
          %h2 To conclude
          %p{style: 'text-transform: uppercase'} Their weakness is their nose
          %div.fragment
            %img{src: "images/gif-1.gif"}
            %p.credit
              Source:
              %a{src: "http://iheartcatgifs.tumblr.com/"} http://iheartcatgifs.tumblr.com/

        %section
          %h2 In summary
          %p They like to drink alone
          %div.fragment
            %img{src: "images/gif-2.gif"}
            %p.credit
              Source:
              %a{src: "http://iheartcatgifs.tumblr.com/"} http://iheartcatgifs.tumblr.com/

        %section
          %h2 And finally
          %div.fragment
            %img{src: "images/gif-3.gif"}
            %p.credit
              Source:
              %a{src: "http://iheartcatgifs.tumblr.com/"} http://iheartcatgifs.tumblr.com/

        %section
          %h2 how many kittens?
          %p.awesome.standout.fragment 12

        %section
          %h2 Get ready for live kittens

    :javascript
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
          controls: true,
          progress: true,
          history: true,
          center: true,
          theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
          transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

          // Optional libraries used to extend on reveal.js
          dependencies: [
              { src: '../reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },
              { src: '../reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
              { src: '../reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
              { src: '../reveal/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
              { src: '../reveal/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
              { src: '../reveal/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
          ]
      });
