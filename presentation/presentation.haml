<!doctype html>
%html{lang: "en"}
  %head
    %meta{charset: "utf-8"}/
    %title The adventures of threads in fluffy kitten land
    %meta{content: "The adventures of threads in fluffy kitten land", name: "description"}/
    %meta{content: "Jon Cairns", name: "author"}/
    %meta{content: "yes", name: "apple-mobile-web-app-capable"}/
    %meta{content: "black-translucent", name: "apple-mobile-web-app-status-bar-style"}/
    %meta{content: "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", name: "viewport"}/
    %link{href: "extra.css", rel: "stylesheet"}/
    %link{href: "../reveal/css/reveal.min.css", rel: "stylesheet"}/
    %link#theme{href: "../reveal/css/theme/night.css", rel: "stylesheet"}/
    / For syntax highlighting
    %link{href: "../reveal/lib/css/zenburn.css", rel: "stylesheet"}/
    / If the query includes 'print-pdf', use the PDF print sheet
    :javascript
      document.write( '<link rel="stylesheet" href="../reveal/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    /[if lt IE 9]
      <script src="../reveal/lib/js/html5shiv.js"></script>
  %body
    %script{src: "../reveal/lib/js/head.min.js"}
    %script{src: "../reveal/js/reveal.min.js"}

    .reveal
      .slides
        %section
          %h1{style: "text-transform: lowercase;"} The adventures of threads
          %h2 In fluffy kitten land
          %p
            %small
              %a{href: "http://joncairns.com"} Jon Cairns
              \/
              %a{href: "http://twitter.com/joonty"} @joonty

        %section
          %section
            %h2 This is about writing multithreaded applications in ruby

          %section
            %h2 But first, a story
            %div.fragment
              %img{src: "images/four-kittens.jpg"}
              %p.credit
                Image from
                %a{src: "http://www.wallpapersat.com/wallpaper/four-fluffy-kitten.html"} http://www.wallpapersat.com/wallpaper/four-fluffy-kitten.html

          %section
            %h2 The great fluffy kitten census
            %ul
              %li.fragment Every kitten should be counted
              %li.fragment The total number of kittens should be produced at the end, along with the totals grouped by colour
              %li.fragment Data for each kitten needs to be stored on the kitten database, which has a web API
              %li.fragment Fred the thread can use any number of his cousins, to speed things up

        %section
          %h2 a definition
          %p.quote
            %span.marks "
            a thread of execution is the smallest sequence of programmed instructions that can be managed independently by an operating system scheduler
            %span.marks "

        %section
          %h2 multithreading and ruby
          %ol
            %li.fragment MRI doesn't let the operating system schedule the threads, it manages that itself
            %li.fragment
              The most popular interpreter,
              %b MRI,
              has a global interpreter lock => only one thread can execute ruby code at any time
            %li.fragment Other interpreters provide true multithreading, e.g. jRuby and Rubinius

        %section
          %h2 multithreading in MRI
          %p
            Even though only one thread can execute
            %span.standout ruby
            at any time, IO operations don't count as being within the interpreter
          %i.fragment.standout Apps with considerable IO use can see speed improvement by multithreading

        %section
          %h2 A fluffy kitten
          %img{src: "images/fluffy-kitten-1.jpg"}
          %p.credit
            Image from
            %a{src: "http://imgarcade.com/1/fluffy-kittens/"} http://imgarcade.com/1/fluffy-kittens/

        %section
          %h2 let's talk about Fred
          %pre
            %code.ruby{"include" => "scripts/thread-methods.rb"}
          %p.fragment You can query a thread variable about it's current status

        %section
          %h2 Scheduling threads
          %pre
            %code.ruby{"include" => "scripts/thread-scheduling.rb"}
          %ol
            %li.fragment Threads can access variables from the scope in which they are defined
            %li.fragment Thread.stop will cause a thread to sleep
            %li.fragment Thread#wakeup or Thread#run will start the thread back up again
            %li.fragment The "return" value of a thread can be accessed with Thread#value

        %section
          %h2 Doing calculatey stuff
          %pre
            %code.ruby{"include" => "scripts/threads-with-calculations.rb"}

          %table.fragment
            %thead
              %tr
                %th No. threads
                %th MRI 2.0.0
                %th jRuby 1.7.0
            %tbody
              %tr
                %td 1
                %td ~ 0.60s
                %td ~ 0.61s
              %tr
                %td 4
                %td ~ 2.47s
                %td ~ 0.74s

        %section
          %h2 Another fluffy kitten
          %img{src: "images/fluffy-kitten-2.png"}
          %p.credit
            Image from
            %a{src: "http://imgarcade.com/1/fluffy-kittens/"} http://imgarcade.com/1/fluffy-kittens/

        %section
          %h2 Doing IO stuff
          %pre
            %code.ruby{"include" => "scripts/threads-with-io.rb"}

          %table.fragment
            %thead
              %tr
                %th No. threads
                %th MRI 2.0.0
                %th jRuby 1.7.0
            %tbody
              %tr
                %td 1
                %td ~ 4.27s
                %td ~ 5.76s
              %tr
                %td 4
                %td ~ 2.40s
                %td ~ 2.95s

        %section
          %section
            %h2 A simple kitten counter
            %p We want to test counting some kittens across multiple threads. Let's try a simple example.
            %pre
              %code.ruby{"include" => "scripts/kitten-counter.rb"}

          %section
            %h4 A simple kitten counter
            %pre
              %code.ruby{"include" => "scripts/kitten-counter-implementation.rb"}

          %section
            %h4 A simple kitten counter
            %p This works nicely in MRI:
            %pre
              %code.bash{"include" => "scripts/kitten-counter-mri.txt"}
            %div.fragment
              %p But it all goes a bit weird in jruby:
              %pre
                %code.bash{"include" => "scripts/kitten-counter-jruby.txt"}




    :javascript
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
          controls: true,
          progress: true,
          history: true,
          center: true,
          theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
          transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

          // Optional libraries used to extend on reveal.js
          dependencies: [
              { src: '../reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },
              { src: '../reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
              { src: '../reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
              { src: '../reveal/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
              { src: '../reveal/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
              { src: '../reveal/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
          ]
      });
